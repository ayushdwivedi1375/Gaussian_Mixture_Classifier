# -*- coding: utf-8 -*-
"""PR_2_V21093.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGxfMaVt1SQGn7r0uU5khdofkqJkq637
"""

from sklearn.mixture import GaussianMixture as GM
from sklearn import metrics
import matplotlib.pyplot as plt
import os
import numpy as np
import pandas as pd

path = "E:\\Indian in 1950s\\CSV Data\\"

lang_dict = {0:'Assam', 1:'Bengali', 2:'English', 3:'Gujarati', 4:'Hindi', 
             5:'Kannada', 6:'Malayalam', 7:'Marati', 8:'Odissa', 9:'Punjabi', 10:'Tamil', 11:'Telugu'}

languages = sorted(os.listdir(path))
languages_path = [path+i for i in languages]

def read_data(path):
    subpath = [path+'\\train\\', path+'\\pb_test\\', path+'\\yt_test\\'] 
    data = []
    for p in subpath:
        temp = []
        for files in os.listdir(p):
            df = pd.read_csv(p+files, delimiter=',', header=None, encoding='utf-16')
            temp.append(np.array(df))
        data.append(temp)

    return data[0], data[1], data[2]



def concat(data):
    concat_data = np.empty([0,39])
    for i in data:
        n = np.array(i)
        concat_data = np.concatenate((concat_data,n),axis=0)
    return concat_data

asm_train, asm_pbtest, asm_yttest = read_data(languages_path[0])
asm_train = concat(asm_train)

ben_train, ben_pbtest, ben_yttest = read_data(languages_path[1])
ben_train = concat(ben_train)

eng_train, eng_pbtest, eng_yttest = read_data(languages_path[2])
eng_train = concat(eng_train)

guj_train, guj_pbtest, guj_yttest = read_data(languages_path[3])
guj_train = concat(guj_train)

hin_train, hin_pbtest, hin_yttest = read_data(languages_path[4])
hin_train = concat(hin_train)

kan_train, kan_pbtest, kan_yttest = read_data(languages_path[5])
kan_train = concat(kan_train)

mal_train, mal_pbtest, mal_yttest = read_data(languages_path[6])
mal_train = concat(mal_train)

mar_train, mar_pbtest, mar_yttest = read_data(languages_path[7])
mar_train = concat(mar_train)

odi_train, odi_pbtest, odi_yttest = read_data(languages_path[8])
odi_train = concat(odi_train)

pun_train, pun_pbtest, pun_yttest = read_data(languages_path[9])
pun_train = concat(pun_train)

tam_train, tam_pbtest, tam_yttest = read_data(languages_path[10])
tam_train = concat(tam_train)

tel_train, tel_pbtest, tel_yttest = read_data(languages_path[11])
tel_train = concat(tel_train)

new_lst=[asm_train,ben_train,eng_train,guj_train,hin_train,kan_train,mal_train,mar_train,odi_train,pun_train,tam_train,tel_train]
new__l=[]
for i in new_lst:
    new__l.append(i)

# Class Assam
asm = GM(n_components=1, init_params='kmeans', covariance_type='full')
asm.fit(asm_train)

#Class Bengal
ben = GM(n_components=1, init_params='kmeans', covariance_type='full')
ben.fit(ben_train)

#Class English
eng = GM(n_components=1, init_params='kmeans', covariance_type='full')
eng.fit(eng_train)

# Class Gujrat
guj = GM(n_components=1, init_params='kmeans', covariance_type='full')
guj.fit(guj_train)

# class Hindi
hin = GM(n_components=1, init_params='kmeans', covariance_type='full')
hin.fit(hin_train)

#calss kannad
kan = GM(n_components=1, init_params='kmeans', covariance_type='full')
kan.fit(kan_train)

#class Malyalam
mal = GM(n_components=1, init_params='kmeans', covariance_type='full')
mal.fit(mal_train)

#class Marathi
mar = GM(n_components=1, init_params='kmeans', covariance_type='full')
mar.fit(mar_train)

#class Odisa
odi = GM(n_components=1, init_params='kmeans', covariance_type='full')
odi.fit(odi_train)

#class Punjab
pun = GM(n_components=1, init_params='kmeans', covariance_type='full')
pun.fit(pun_train)

#class Tamil
tam = GM(n_components=1, init_params='kmeans', covariance_type='full')
tam.fit(tam_train)

#class Telgu
tel = GM(n_components=1, init_params='kmeans', covariance_type='full')
tel.fit(tel_train)

"""# Testing"""

def detect(val):
    lang_dict = {0:'Assam', 1:'Bengali', 2:'English', 3:'Gujarati', 4:'Hindi', 
             5:'Kannada', 6:'Malayalam', 7:'Marati', 8:'Odissa', 9:'Punjabi', 10:'Tamil', 11:'Telugu'}
    return lang_dict[val]
def get_scores(lang, test):
    return np.mean(lang.score_samples(test))
def get_gt(c, n):
    return [c for i in range(n)]
def system_predict(dataset):
    res = []
    for i in dataset:
        lh = [get_scores(asm, i), get_scores(ben, i), get_scores(eng, i),
             get_scores(guj, i), get_scores(hin, i), get_scores(kan, i),
             get_scores(mal, i), get_scores(mar, i), get_scores(odi, i),
             get_scores(pun, i), get_scores(tam, i), get_scores(tel, i)]

        res.append(np.argmax(lh))
    return res

# Testing on prasar Bharati data of all classes.
predicted_asm = system_predict(asm_pbtest)
predicted_ben = system_predict(ben_pbtest)
predicted_eng = system_predict(eng_pbtest)
predicted_guj = system_predict(guj_pbtest)
predicted_hin = system_predict(hin_pbtest)
predicted_kan = system_predict(kan_pbtest)
predicted_mal = system_predict(mal_pbtest)
predicted_mar = system_predict(mar_pbtest)
predicted_odi = system_predict(odi_pbtest)
predicted_pun = system_predict(pun_pbtest)
predicted_tam = system_predict(tam_pbtest)
predicted_tel = system_predict(tel_pbtest)
gt_asm = get_gt(0, len(predicted_asm))
gt_ben = get_gt(1, len(predicted_ben))
gt_eng = get_gt(2, len(predicted_eng))
gt_guj = get_gt(3, len(predicted_guj))
gt_hin = get_gt(4, len(predicted_hin))
gt_kan = get_gt(5, len(predicted_kan))
gt_mal = get_gt(6, len(predicted_mal))
gt_mar = get_gt(7, len(predicted_mar))
gt_odi = get_gt(8, len(predicted_odi))
gt_pun = get_gt(9, len(predicted_pun))
gt_tam = get_gt(10, len(predicted_tam))
gt_tel = get_gt(11, len(predicted_tel))
predicted = predicted_asm + predicted_ben + predicted_eng + predicted_guj + predicted_hin + predicted_kan + predicted_mal + predicted_mar + predicted_odi + predicted_pun + predicted_tam + predicted_tel
gt = gt_asm + gt_ben + gt_eng + gt_guj + gt_hin + gt_kan + gt_mal + gt_mar + gt_odi + gt_pun + gt_tam + gt_tel

# Creating Confusion Matrix for that.
confusion_matrix = metrics.confusion_matrix(gt, predicted, labels=list(lang_dict.keys()))
print(confusion_matrix)

from sklearn import metrics

Accuracyy= metrics.accuracy_score(gt, predicted)

print(Accuracyy)

from sklearn import metrics

from sklearn.metrics import confusion_matrix

mat_con1 = (confusion_matrix(gt, predicted, labels=list(lang_dict.keys())))


fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)

fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con1.shape[0]):
    for n in range(mat_con1.shape[1]):
        px.text(x=m,y=n,s=mat_con1[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=25)
plt.ylabel('Actuals', fontsize=25)
plt.title('Confusion Matrix', fontsize=25)
plt.show()

# testing the given gmm model for the Youtube data.
predicted_asm = system_predict(asm_yttest)
predicted_ben = system_predict(ben_yttest)
predicted_eng = system_predict(eng_yttest)
predicted_guj = system_predict(guj_yttest)
predicted_hin = system_predict(hin_yttest)
predicted_kan = system_predict(kan_yttest)
predicted_mal = system_predict(mal_yttest)
predicted_mar = system_predict(mar_yttest)
predicted_odi = system_predict(odi_yttest)
predicted_pun = system_predict(pun_yttest)
predicted_tam = system_predict(tam_yttest)
predicted_tel = system_predict(tel_yttest)
gt_asm = get_gt(0, len(predicted_asm))
gt_ben = get_gt(1, len(predicted_ben))
gt_eng = get_gt(2, len(predicted_eng))
gt_guj = get_gt(3, len(predicted_guj))
gt_hin = get_gt(4, len(predicted_hin))
gt_kan = get_gt(5, len(predicted_kan))
gt_mal = get_gt(6, len(predicted_mal))
gt_mar = get_gt(7, len(predicted_mar))
gt_odi = get_gt(8, len(predicted_odi))
gt_pun = get_gt(9, len(predicted_pun))
gt_tam = get_gt(10, len(predicted_tam))
gt_tel = get_gt(11, len(predicted_tel))
predicted_yt = predicted_asm + predicted_ben + predicted_eng + predicted_guj + predicted_hin + predicted_kan + predicted_mal + predicted_mar + predicted_odi + predicted_pun + predicted_tam + predicted_tel
gtt = gt_asm + gt_ben + gt_eng + gt_guj + gt_hin + gt_kan + gt_mal + gt_mar + gt_odi + gt_pun + gt_tam + gt_tel
confusion_matrix = metrics.confusion_matrix(gtt, predicted_yt, labels=list(lang_dict.keys()))
print(confusion_matrix)

from sklearn.metrics import confusion_matrix

mat_con1 = (confusion_matrix(gtt, predicted_yt, labels=list(lang_dict.keys())))


fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)

fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con1.shape[0]):
    for n in range(mat_con1.shape[1]):
        px.text(x=m,y=n,s=mat_con1[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=25)
plt.ylabel('Actuals', fontsize=25)
plt.title('Confusion Matrix', fontsize=25)
plt.show()

Acc_d1 = metrics.accuracy_score(gtt, predicted_yt)
print(Acc_d1)

from matplotlib import pyplot as plt
n=[]
a=[]
for i in range(20):
    n.append(i+1)
    asm = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    asm.fit(asm_train)
    predicted_asm = system_predict(asm_pbtest)
    gt_asm = get_gt(0, len(predicted_asm))
    A= metrics.accuracy_score(gt_asm, predicted_asm)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    ben = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    ben.fit(ben_train)
    predicted_asm = system_predict(ben_pbtest)
    gt_ben = get_gt(0, len(predicted_ben))
    A= metrics.accuracy_score(gt_ben, predicted_ben)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    eng = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    eng.fit(eng_train)
    predicted_eng = system_predict(eng_pbtest)
    gt_eng = get_gt(0, len(predicted_eng))
    A= metrics.accuracy_score(gt_eng, predicted_eng)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(20):
    n.append(i+1)
    guj = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    guj.fit(guj_train)
    predicted_guj = system_predict(guj_pbtest)
    gt_guj = get_gt(0, len(predicted_guj))
    A= metrics.accuracy_score(gt_guj, predicted_guj)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    hin = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    hin.fit(hin_train)
    predicted_hin = system_predict(hin_pbtest)
    gt_hin = get_gt(0, len(predicted_hin))
    A= metrics.accuracy_score(gt_hin, predicted_hin)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    kan = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    kan.fit(kan_train)
    predicted_kan = system_predict(kan_pbtest)
    gt_kan = get_gt(0, len(predicted_kan))
    A= metrics.accuracy_score(gt_kan, predicted_kan)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    mal = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    mal.fit(mal_train)
    predicted_mal = system_predict(mal_pbtest)
    gt_mal = get_gt(0, len(predicted_mal))
    A= metrics.accuracy_score(gt_mal, predicted_mal)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    mar = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    mar.fit(mar_train)
    predicted_mar = system_predict(mar_pbtest)
    gt_mar = get_gt(0, len(predicted_mar))
    A= metrics.accuracy_score(gt_mar, predicted_mar)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    odi = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    odi.fit(asm_train)
    predicted_odi = system_predict(odi_pbtest)
    gt_odi = get_gt(0, len(predicted_odi))
    A= metrics.accuracy_score(gt_odi, predicted_odi)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    pun = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    pun.fit(pun_train)
    predicted_pun = system_predict(pun_pbtest)
    gt_pun = get_gt(0, len(predicted_pun))
    A= metrics.accuracy_score(gt_pun, predicted_pun)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    tam = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    tam.fit(tam_train)
    predicted_tam = system_predict(tam_pbtest)
    gt_tam = get_gt(0, len(predicted_tam))
    A= metrics.accuracy_score(gt_tam, predicted_tam)
    a.append(A)
plt.plot(n,a)
plt.show()

n=[]
a=[]
for i in range(8):
    n.append(i+1)
    tel = GM(n_components=i+1, init_params='kmeans', covariance_type='full')
    tel.fit(tel_train)
    predicted_tel = system_predict(tel_pbtest)
    gt_tel = get_gt(0, len(predicted_tel))
    A= metrics.accuracy_score(gt_tel, predicted_tel)
    a.append(A)
plt.plot(n,a)
plt.show()

"""# Training the GMM with diagonal covariance matrix."""

asm = GM(n_components=1, init_params='kmeans', covariance_type='diag')
asm.fit(asm_train)

ben = GM(n_components=1, init_params='kmeans', covariance_type='diag')
ben.fit(ben_train)

eng = GM(n_components=1, init_params='kmeans', covariance_type='diag')
eng.fit(eng_train)

guj = GM(n_components=1, init_params='kmeans', covariance_type='diag')
guj.fit(guj_train)

hin = GM(n_components=1, init_params='kmeans', covariance_type='diag')
hin.fit(hin_train)

kan = GM(n_components=1, init_params='kmeans', covariance_type='diag')
kan.fit(kan_train)

mal = GM(n_components=1, init_params='kmeans', covariance_type='diag')
mal.fit(mal_train)

mar = GM(n_components=1, init_params='kmeans', covariance_type='diag')
mar.fit(mar_train)

odi = GM(n_components=1, init_params='kmeans', covariance_type='diag')
odi.fit(odi_train)

pun = GM(n_components=1, init_params='kmeans', covariance_type='diag')
pun.fit(pun_train)

tam = GM(n_components=1, init_params='kmeans', covariance_type='diag')
tam.fit(tam_train)

tel = GM(n_components=1, init_params='kmeans', covariance_type='diag')
tel.fit(tel_train)

# testing the diagonal model with Prasar bharati Data.
predicted_asm = system_predict(asm_pbtest)
predicted_ben = system_predict(ben_pbtest)
predicted_eng = system_predict(eng_pbtest)
predicted_guj = system_predict(guj_pbtest)
predicted_hin = system_predict(hin_pbtest)
predicted_kan = system_predict(kan_pbtest)
predicted_mal = system_predict(mal_pbtest)
predicted_mar = system_predict(mar_pbtest)
predicted_odi = system_predict(odi_pbtest)
predicted_pun = system_predict(pun_pbtest)
predicted_tam = system_predict(tam_pbtest)
predicted_tel = system_predict(tel_pbtest)
gt_asm = get_gt(0, len(predicted_asm))
gt_ben = get_gt(1, len(predicted_ben))
gt_eng = get_gt(2, len(predicted_eng))
gt_guj = get_gt(3, len(predicted_guj))
gt_hin = get_gt(4, len(predicted_hin))
gt_kan = get_gt(5, len(predicted_kan))
gt_mal = get_gt(6, len(predicted_mal))
gt_mar = get_gt(7, len(predicted_mar))
gt_odi = get_gt(8, len(predicted_odi))
gt_pun = get_gt(9, len(predicted_pun))
gt_tam = get_gt(10, len(predicted_tam))
gt_tel = get_gt(11, len(predicted_tel))
predicted_11 = predicted_asm + predicted_ben + predicted_eng + predicted_guj + predicted_hin + predicted_kan + predicted_mal + predicted_mar + predicted_odi + predicted_pun + predicted_tam + predicted_tel
gt_11 = gt_asm + gt_ben + gt_eng + gt_guj + gt_hin + gt_kan + gt_mal + gt_mar + gt_odi + gt_pun + gt_tam + gt_tel

Acc_d = metrics.accuracy_score(gt_11, predicted_11)
print(Acc_d)

from sklearn import metrics

from sklearn.metrics import confusion_matrix

mat_con1 = (confusion_matrix(gt_11, predicted_11, labels=list(lang_dict.keys())))


fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)

fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con1.shape[0]):
    for n in range(mat_con1.shape[1]):
        px.text(x=m,y=n,s=mat_con1[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=25)
plt.ylabel('Actuals', fontsize=25)
plt.title('Confusion Matrix', fontsize=25)
plt.show()

"""# GMM with diagonal covariance for Youtube data."""

predicted_asm = system_predict(asm_yttest)
predicted_ben = system_predict(ben_yttest)
predicted_eng = system_predict(eng_yttest)
predicted_guj = system_predict(guj_yttest)
predicted_hin = system_predict(hin_yttest)
predicted_kan = system_predict(kan_yttest)
predicted_mal = system_predict(mal_yttest)
predicted_mar = system_predict(mar_yttest)
predicted_odi = system_predict(odi_yttest)
predicted_pun = system_predict(pun_yttest)
predicted_tam = system_predict(tam_yttest)
predicted_tel = system_predict(tel_yttest)
gt_asm = get_gt(0, len(predicted_asm))
gt_ben = get_gt(1, len(predicted_ben))
gt_eng = get_gt(2, len(predicted_eng))
gt_guj = get_gt(3, len(predicted_guj))
gt_hin = get_gt(4, len(predicted_hin))
gt_kan = get_gt(5, len(predicted_kan))
gt_mal = get_gt(6, len(predicted_mal))
gt_mar = get_gt(7, len(predicted_mar))
gt_odi = get_gt(8, len(predicted_odi))
gt_pun = get_gt(9, len(predicted_pun))
gt_tam = get_gt(10, len(predicted_tam))
gt_tel = get_gt(11, len(predicted_tel))
predicted_ytt = predicted_asm + predicted_ben + predicted_eng + predicted_guj + predicted_hin + predicted_kan + predicted_mal + predicted_mar + predicted_odi + predicted_pun + predicted_tam + predicted_tel
gttt = gt_asm + gt_ben + gt_eng + gt_guj + gt_hin + gt_kan + gt_mal + gt_mar + gt_odi + gt_pun + gt_tam + gt_tel
confusion_matrix = metrics.confusion_matrix(gtt, predicted_yt, labels=list(lang_dict.keys()))

Acc_dd = metrics.accuracy_score(gttt, predicted_ytt)
print(Acc_dd)

from sklearn.metrics import confusion_matrix

mat_con1 = (confusion_matrix(gt, predicted, labels=list(lang_dict.keys())))


fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)

fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con1.shape[0]):
    for n in range(mat_con1.shape[1]):
        px.text(x=m,y=n,s=mat_con1[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=25)
plt.ylabel('Actuals', fontsize=25)
plt.title('Confusion Matrix', fontsize=25)
plt.show()

"""# Forming the UBM_GMM by concatenating all training data."""

new_lst=[asm_train,ben_train,eng_train,guj_train,hin_train,kan_train,mal_train,mar_train,odi_train,pun_train,tam_train,tel_train]
new__l=[]
for i in new_lst:
    new__l.append(i)

#Fitting the UBM model and testing it for Prasar Bharati Data
com_train = concat(new__l)
ubm=GM(n_components=12, init_params='kmeans', covariance_type='full')
ubm.fit(com_train)
asm_pbtest=concat(asm_pbtest)
label_asm=ubm.predict(asm_pbtest)
ben_pbtest=concat(ben_pbtest)
label_ben=ubm.predict(ben_pbtest)
eng_pbtest=concat(eng_pbtest)
label_eng=ubm.predict(eng_pbtest)
guj_pbtest=concat(guj_pbtest)
label_guj=ubm.predict(guj_pbtest)
hin_pbtest=concat(hin_pbtest)
label_hin=ubm.predict(hin_pbtest)
kan_pbtest=concat(kan_pbtest)
label_kan=ubm.predict(kan_pbtest)
mal_pbtest=concat(mal_pbtest)
label_mal=ubm.predict(mal_pbtest)
mar_pbtest=concat(mar_pbtest)
label_mar=ubm.predict(mar_pbtest)
odi_pbtest=concat(odi_pbtest)
label_odi=ubm.predict(odi_pbtest)
pun_pbtest=concat(pun_pbtest)
label_pun=ubm.predict(pun_pbtest)
tam_pbtest=concat(tam_pbtest)
label_tam=ubm.predict(tam_pbtest)
tel_pbtest=concat(tel_pbtest)
label_tel=ubm.predict(tel_pbtest)




gt_asm = get_gt(0, len(label_asm))
gt_ben = get_gt(1, len(label_ben))
gt_eng = get_gt(2, len(label_eng))
gt_guj = get_gt(3, len(label_guj))
gt_hin = get_gt(4, len(label_hin))
gt_kan = get_gt(5, len(label_kan))
gt_mal = get_gt(6, len(label_mal))
gt_mar = get_gt(7, len(label_mar))
gt_odi = get_gt(8, len(label_odi))
gt_pun = get_gt(9, len(label_pun))
gt_tam = get_gt(10, len(label_tam))
gt_tel = get_gt(11, len(label_tel))

gt1 = gt_asm + gt_ben + gt_eng + gt_guj + gt_hin + gt_kan + gt_mal + gt_mar + gt_odi + gt_pun + gt_tam + gt_tel
label= list(label_asm )+ list(label_ben) +list(label_eng) + list(label_guj) + list(label_hin) + list(label_kan) + list(label_mal) + list(label_mar) + list(label_odi) + list(label_pun) + list(label_tam) + list(label_tel)

from sklearn.metrics import confusion_matrix

mat_con1 = (confusion_matrix(gt1, label, labels=list(lang_dict.keys())))


fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)

fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con1.shape[0]):
    for n in range(mat_con1.shape[1]):
        px.text(x=m,y=n,s=mat_con1[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=25)
plt.ylabel('Actuals', fontsize=25)
plt.title('Confusion Matrix', fontsize=25)
plt.show()

Acc_ubm = metrics.accuracy_score(gt1, label)

print(Acc_ubm)

"""# UBM- GMM for testing Youtube data."""

asm_yttest=concat(asm_yttest)
label1_asm=ubm.predict(asm_yttest)
ben_yttest=concat(ben_yttest)
label1_ben=ubm.predict(ben_yttest)
eng_yttest=concat(eng_yttest)
label1_eng=ubm.predict(eng_pbtest)
guj_yttest=concat(guj_yttest)
label1_guj=ubm.predict(guj_yttest)
hin_yttest=concat(hin_yttest)
label1_hin=ubm.predict(hin_yttest)
kan_yttest=concat(kan_yttest)
label1_kan=ubm.predict(kan_yttest)
mal_yttest=concat(mal_yttest)
label1_mal=ubm.predict(mal_yttest)
mar_yttest=concat(mar_yttest)
label1_mar=ubm.predict(mar_yttest)
odi_yttest=concat(odi_yttest)
label1_odi=ubm.predict(odi_yttest)
pun_yttest=concat(pun_yttest)
label1_pun=ubm.predict(pun_yttest)
tam_yttest=concat(tam_yttest)
label1_tam=ubm.predict(tam_yttest)
tel_yttest=concat(tel_yttest)
label1_tel=ubm.predict(tel_yttest)

gt_asm = get_gt(0, len(label1_asm))
gt_ben = get_gt(1, len(label1_ben))
gt_eng = get_gt(2, len(label1_eng))
gt_guj = get_gt(3, len(label1_guj))
gt_hin = get_gt(4, len(label1_hin))
gt_kan = get_gt(5, len(label1_kan))
gt_mal = get_gt(6, len(label1_mal))
gt_mar = get_gt(7, len(label1_mar))
gt_odi = get_gt(8, len(label1_odi))
gt_pun = get_gt(9, len(label1_pun))
gt_tam = get_gt(10, len(label1_tam))
gt_tel = get_gt(11, len(label1_tel))

gt_yt = gt_asm + gt_ben + gt_eng + gt_guj + gt_hin + gt_kan + gt_mal + gt_mar + gt_odi + gt_pun + gt_tam + gt_tel
label1= list(label1_asm )+ list(label1_ben) +list(label1_eng) + list(label1_guj) + list(label1_hin) + list(label1_kan) + list(label1_mal) + list(label1_mar) + list(label1_odi) + list(label1_pun) + list(label1_tam) + list(label1_tel)

from sklearn.metrics import confusion_matrix

mat_con1 = (confusion_matrix(gt_yt, label1, labels=list(lang_dict.keys())))


fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
plt.xlabel('Predictions', fontsize=16)
plt.ylabel('Actuals', fontsize=16)

fig, px = plt.subplots(figsize=(10, 10))
px.matshow(mat_con1, cmap=plt.cm.YlOrRd, alpha=0.5)
for m in range(mat_con1.shape[0]):
    for n in range(mat_con1.shape[1]):
        px.text(x=m,y=n,s=mat_con1[m, n], va='center', ha='center', size='xx-large')

# Sets the labels
plt.xlabel('Predictions', fontsize=25)
plt.ylabel('Actuals', fontsize=25)
plt.title('Confusion Matrix', fontsize=25)
plt.show()

Accuracy_yt = metrics.accuracy_score(gt_yt, label1)
print(Accuracy_yt)

